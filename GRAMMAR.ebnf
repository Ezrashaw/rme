/* common types */
<digit>      ::= [0-9]
<number>     ::= (<digit> | ".")+
<letter>     ::= [a-z] | [A-Z]
<identifier> ::= <letter> (<letter> | <digit>)*

<literal>    ::= <number> | "true" | "false"

/* the root program node */
<statement> ::= <var_def> | <expression>

<var_def> ::= "let " <identifier> "=" <expression>

/* expression tree. further down = higher precedence */
<expression>          ::= <additive_expression>
<additive_expression> ::= <term> (("+" | "-") <term>)*
<term>                ::= <factor> (("*" | "/") <factor>)*
<unary_prefix>        ::= "-" <unary_prefix> | <unary_postfix>
<unary_postfix>       ::= <factor> "!"*
<factor>              ::= <literal> | "(" <expression> ")" | <identifier> <fn_call_args>?

/* complex grammar constructs */
<fn_call_args>             ::= "(" (<expression> ("," <expression>)*)? ")"